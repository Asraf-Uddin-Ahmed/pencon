/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ResultPage.java
 *
 * Created on Aug 26, 2012, 3:42:13 AM
 */
package pencon;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.util.Arrays;
import javax.swing.JOptionPane;

/**
 *
 * @author RATUL
 */
public class ResultPage extends javax.swing.JFrame {

    /** Creates new form ResultPage */
    public ResultPage(){
        initComponents();
        setLocationRelativeTo(null);
        //setExtendedState(MAXIMIZED_BOTH);
        
        //set title
        //String passwordFolderPath = "J:" + "\\Password";
        String passwordFolderPath = SystemInformation.penDrive.toString() + "\\Password";
        String contestantNamePath = new Password().getContestantPasswordFilePath(passwordFolderPath);
        String tokens[] = contestantNamePath.split("[\\\\.]");
        String teamName = tokens[tokens.length-2];
        setTitle("Result (Team Name : "+teamName+")");
        
        //collect result
        //String resultFilePath = "J:" + "\\Info\\Result.txt";
        String resultFilePath = SystemInformation.penDrive.toString() + "\\Info\\Result.txt"; //"J:"
        FileDirectory fileDirectory = new FileDirectory();
        Vector lines = new Vector();
        try{
            lines = fileDirectory.getFileVector(resultFilePath);
        }catch(IOException iOException){
            JOptionPane.showMessageDialog(null, "Result not found.", "Team Name : "+teamName, JOptionPane.ERROR_MESSAGE);
            System.out.println("ResultPage => "+iOException);
        }
        
        //center alignment of value in all column which is String typed
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        jTableResult.setDefaultRenderer(String.class, centerRenderer);
        
        jTableResult.setRowHeight(24);
        
        //PRINT
        int totalPenlatyTime = 0;
        EncryptionDecryption encryptionDecryption = new EncryptionDecryption();
        int key = encryptionDecryption.getEncryptValue(resultFilePath);
        int totalSolve = 0;
        for(int I=0; I<lines.size(); I++){
            //inserting a new row
            ( (DefaultTableModel)jTableResult.getModel() ).insertRow(I, new Vector<Object>());
            String submissionEncrypt = lines.get(I).toString();
            //decrypt here
            String submissionDecrypt = encryptionDecryption.decrypt(key, submissionEncrypt);
            String attributes[] = submissionDecrypt.split(" ");
            for(int J=0; J<4; J++){
                jTableResult.setValueAt(attributes[J] , I, J);
            }
            //calculating total penalty time
            if( attributes[3].equals("-")==false ){
                totalSolve++;
                totalPenlatyTime += Integer.valueOf(attributes[3]);
            }
        }
        //last row
        int lastRow = lines.size();
        ( (DefaultTableModel)jTableResult.getModel() ).insertRow(lastRow, new Vector<Object>());
        jTableResult.setValueAt("-" , lastRow, 0);
        jTableResult.setValueAt("-" , lastRow, 1);
        jTableResult.setValueAt("-" , lastRow, 2);
        jTableResult.setValueAt(totalPenlatyTime , lastRow, 3);
        
        //storing submission history
        ArrayList<String> submissionHistory = new ArrayList<String>(Arrays.asList(teamName, String.valueOf(totalSolve), String.valueOf(totalPenlatyTime) ));
        System.out.println("ReultPage => " + submissionHistory );
        SystemInformation.teamSubmissionHistories.add(submissionHistory);
    }
    
    
    
    
    /**/
    void selectRowContainsSameWord(){
        int row = jTableResult.getSelectedRow();
        int column = jTableResult.getSelectedColumn();
        String searchWord = jTableResult.getValueAt(row, column).toString();
        int totalRow = jTableResult.getRowCount();
        System.out.println("ResultPage => "+row+" "+column+" -> "+searchWord+" "+totalRow);
        
        //row selection
        for(int I=0; I<totalRow; I++){
            String recentWord = jTableResult.getValueAt(I, column).toString();
            if( recentWord.equals(searchWord)==true )
                jTableResult.addRowSelectionInterval(I, I);
        }
        //initialize by seleceted cell
        jTableResult.addRowSelectionInterval(row, row);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableResult = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTableResult.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTableResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Problem ID", "Submission Time", "Verdict", "Penalty Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableResultMouseReleased(evt);
            }
        });
        jTableResult.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableResultKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableResult);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jTableResultKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableResultKeyReleased
    try{
        selectRowContainsSameWord();
    }catch(Exception exception){
        System.out.println("ResultPage => "+exception);
    }
}//GEN-LAST:event_jTableResultKeyReleased

private void jTableResultMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableResultMouseReleased
    try{
        selectRowContainsSameWord();
    }catch(Exception exception){
        System.out.println("ResultPage => "+exception);
    }
}//GEN-LAST:event_jTableResultMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResultPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResultPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResultPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResultPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run(){
                new ResultPage().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableResult;
    // End of variables declaration//GEN-END:variables
}
